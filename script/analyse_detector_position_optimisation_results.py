#!/usr/bin/env python3

import matplotlib.pyplot as plt
import os
import subprocess
import numpy as np

def get_args():
    parser = argparse.ArgumentParser(description='Analyse the results of detector position refinement and display results.')
    parser.add_argument('input_json', help='json file generated by optimise_geometry_by_indexing_rate.py with processing parameters.')
    return parser.parse_args()

def display_2d_results(data):
    pixel_plot = plt.figure()
    pixel_plot.add_axes()
    plt.title('indexing results by detector origin translation')
    pixel_plot = plt.imshow(data,extent=[-0.02,0.02,-0.02,0.02])
    plt.xticks([-0.015, -0.005, 0.005, 0.015])
    plt.yticks([-0.015, -0.005, 0.005, 0.015])
    plt.colorbar(pixel_plot)
    plt.show()


def load_results_from_folders():
    outfolders = [x for x in os.listdir('..') if x.endswith('out')]
    images_indexed = []
    for f in outfolders:
        print(f)
        imgs = subprocess.run(['grep real_space_a ../'+f+'/*refined.expt | wc -l'],shell=True,capture_output=True)
        print(int(imgs.stdout.decode()))
        images_indexed.append(int(imgs.stdout.decode()))

    grid = np.reshape(images_indexed, (4,4)).transpose()
    print(grid)
    return grid

def main():
    os.chdir('/nfs/data2/2022_Run4/com-proxima2a/2022-09-11/RAW_DATA/IHR/David/GasCell/MUF16_CO2/single_test_wedges/1_2_bar/process/optimise_geom/geoms-old2/analysis')
    data = load_results_from_folders()
    display_2d_results(data)

if __name__ == '__main__':
    main()